/**
 * READ THIS DESCRIPTION!
 *
 * This is your processor module that will contain the bulk of your code submission. You are to implement
 * a 5-stage pipelined processor in this module, accounting for hazards and implementing bypasses as
 * necessary.
 *
 * Ultimately, your processor will be tested by a master skeleton, so the
 * testbench can see which controls signal you active when. Therefore, there needs to be a way to
 * "inject" imem, dmem, and regfile interfaces from some external controller module. The skeleton
 * file, Wrapper.v, acts as a small wrapper around your processor for this purpose. Refer to Wrapper.v
 * for more details.
 *
 * As a result, this module will NOT contain the RegFile nor the memory modules. Study the inputs 
 * very carefully - the RegFile-related I/Os are merely signals to be sent to the RegFile instantiated
 * in your Wrapper module. This is the same for your memory elements. 
 *
 *
 */
module processor(
    // Control signals
    clock,                          // I: The master clock
    reset,                          // I: A reset signal

    // Imem
    address_imem,                   // O: The address of the data to get from imem
    q_imem,                         // I: The data from imem

    // Dmem
    address_dmem,                   // O: The address of the data to get or put from/to dmem
    data,                           // O: The data to write to dmem
    wren,                           // O: Write enable for dmem
    q_dmem,                         // I: The data from dmem

    // Regfile
    ctrl_writeEnable,               // O: Write enable for RegFile
    ctrl_writeReg,                  // O: Register to write to in RegFile
    ctrl_readRegA,                  // O: Register to read from port A of RegFile
    ctrl_readRegB,                  // O: Register to read from port B of RegFile
    data_writeReg,                  // O: Data to write to for RegFile
    data_readRegA,                  // I: Data from port A of RegFile
    data_readRegB                   // I: Data from port B of RegFile
	 
	);

	// Control signals
	input clock, reset;
	
	// Imem
    output [31:0] address_imem;
	input [31:0] q_imem;

	// Dmem
	output [31:0] address_dmem, data;
	output wren;
	input [31:0] q_dmem;

	// Regfile
	output ctrl_writeEnable;
	output [4:0] ctrl_writeReg, ctrl_readRegA, ctrl_readRegB;
	output [31:0] data_writeReg;
	input [31:0] data_readRegA, data_readRegB;

    //Latches reset signal
    // wire r, s, q, q_not;
    // nor nor_0(q, r, q_not);
    // nor nor_1(q_not, q, s);

    // assign r = reset;
    // assign s = clock;

    //*****************************Fetch*****************************

    wire [31:0] address_imem_new, address_imem_curr;
    assign address_imem = address_imem_new;
    //assign address_imem = q_not ? 32'b0 : address_imem_new;
    //register address_reg(clock, 1'b1, reset, address_imem, address_imem_curr);

    assign ctrl_writeEnable = 1'b1;
    wire placeholder, pc_neq, pc_lt;
    cla_32_bit program_counter(address_imem_curr, 32'b1, 1'b0, address_imem_new, placeholder, pc_neq, pc_lt);
    register reg_pc(clock, 1'b1, reset, address_imem, address_imem_curr);
    

    wire [31:0] reg_f_d_out, reg_d_x_out, reg_x_m_out, reg_m_w_out;
    register reg_f_d(clock, 1'b1, reset, q_imem, reg_f_d_out);
    
    


    //*****************************Decode*****************************
    register reg_d_x(clock, 1'b1, reset, reg_f_d_out, reg_d_x_out);

    wire [31:0] d_x_A_in, d_x_A_out, d_x_B_in, d_x_B_out;
    
    //$rs
    assign ctrl_readRegA = reg_f_d_out[21:17];
    //$rt 
    assign ctrl_readRegB = reg_f_d_out[16:12];
       
    assign d_x_A_in = data_readRegA;
    assign d_x_B_in = data_readRegB;
    register reg_d_x_A(clock, 1'b1, reset, d_x_A_in, d_x_A_out);
    register reg_d_x_B(clock, 1'b1, reset, d_x_B_in, d_x_B_out);

    

    //*****************************Execute*****************************
    register reg_x_m(clock, 1'b1, reset, reg_d_x_out, reg_x_m_out);

    //Addi sign extension
    wire [31:0] add_i_imm; 
    //q_imem[16:0];
    wire [15:0] add_i_sign;
    assign wren = 1'b0;    
    assign add_i_sign = reg_d_x_out[16] ? 16'b1111111111111111 : 16'b0000000000000000;
    assign add_i_imm = {add_i_sign, reg_d_x_out[16:0]};


    wire [4:0] opcode;
    assign opcode = reg_d_x_out[31:27];

    //$rs
    //assign ctrl_readRegA = q_imem[21:17];
    //$rt 
    //assign ctrl_readRegB = q_imem[16:12];

    //Shift amount
    wire [4:0] shamt;
    assign shamt = reg_d_x_out[11:7];
    //ALU OP
    wire [4:0] alu_op;
    assign alu_op = reg_d_x_out[6:2];
    //zeroes


    wire [4:0] add_OP, sub_OP, and_OP, or_OP, sll_OP, sra_OP;
    assign add_OP = 5'd0;
    assign sub_OP = 5'd1;

    wire is00000opcode;
    assign is00000opcode = opcode == 0;

    wire [31:0] alu_op_B;
    assign alu_op_B = is00000opcode ? d_x_B_out : add_i_imm;

    wire [4:0] alu_act_op;
    assign alu_act_op = is00000opcode ? alu_op : add_OP;


    wire [31:0] ALU_out;
    wire lessThan, notEqual, overFlow;
    alu alu(d_x_A_out, alu_op_B, alu_act_op, shamt, ALU_out, notEqual, lessThan, overFlow);
    //assign address_imem = 32'b0;

    //5'b00101
    //module alu(data_operandA, data_operandB, ctrl_ALUopcode, ctrl_shiftamt, data_result, isNotEqual, isLessThan, overflow);
    wire [31:0] ALU_res;

    
    
    register reg_alu(clock, 1'b1, reset, ALU_out, ALU_res);

    //register reg_b(clock, 1'b1, reset, reg_x_m_out, reg_m_w_out);
    //alu alu(data_readRegA, add_i_imm, add_OP, 5'b0, temp_out, temp1, temp2, temp3);
	
    //*****************************Memory*****************************
    register reg_m_w(clock, 1'b1, reset, reg_x_m_out, reg_m_w_out);

    wire [4:0] mem_opcode;
    assign mem_opcode = reg_x_m_out[31:27];

    //Only writes to the data memory if current operation is sw
    assign wren = mem_opcode == 00111 ? 1'b1 : 1'b0;
    //data = 

    //reg_x_m_out
    //$rd

    assign address_dmem = ALU_res;


    assign ctrl_writeReg = reg_x_m_out[26:22];

    assign data_writeReg = ALU_res;

    assign wren = mem_opcode == 01000 ? 1'b1 : 1'b0;

	/* END CODE */

endmodule